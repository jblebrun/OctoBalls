# Ball and region set, moved by moveball.
:alias bx v0
:alias by v1
:alias dx v2
:alias dy v3
:alias top v4
:alias left v5
:alias right v6
:alias bottom v7


:macro m bn {
  i := bn
	load v7
	moveball
	i := bn
	save v7
}


: main
i := b1
init
i := b2
init
i := b3
init
i := b4
init


loop
	v5 := delay
	
	if v5 == 0 begin
		m b1
		m b2
		m b3
		m b4
		v5 := 1
		delay := v5
	end
	
again


: init
	load v7
	i := dot
	sprite bx by 1
;

:alias sign vf
:alias tmp vd

:macro checkbound coord velo bound expect {
    # Check again start bound
		tmp := coord
		tmp -= bound
		tmp += velo
		if vf == expect begin 
			coord := bound
			# negate velocity
			tmp := 0
			velo =- tmp
		else
		  coord += velo
		end	
}

:macro ud2 coordinate velocity boundStart boundEnd {
	# Find sign of velocity
	# Shifts left one, MSB goes into vF (sign)
	sign <<= velocity
	
	if sign == 1 begin
	    checkbound coordinate velocity boundStart 0
	else 
		  checkbound coordinate velocity boundEnd 1
	end
}

# WHY IS IT SO HARD TO BOUNCE A BALL
: moveball

	va := bx
	vb := by	
	
	ud2 bx dx left right
	ud2 by dy top bottom
  
: db
  i := dot
  sprite va vb 1
	sprite bx by 1
;

# repack as 
# x dx l r y dy t b
# So we can do smaller loads
: dot
0x80
: b1
16 15 -1 3 0 0 63 31
: b2
35 11 2 3 0 32 63 15
: b3
17 21 1 2 16 0 31 31
: b4
45 20 -1 -2 15 31 63 31
: b5
0 0 0 0 0 0 63 31
: b6
0 0 0 0 0 0 63 31
: b7
0 0 0 0 0 0 63 31
: b8
0 0 0 0 0 0 63 31




